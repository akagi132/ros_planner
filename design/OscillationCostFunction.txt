@startuml{OscillationCostFunction.png}

scale 1.5

class "TrajectoryCostFunction" as Traj
class "OscillationCostFunction" as Osci

class Traj {
    +virtual void prepare() = 0
    +virtual double scoreTrajectory(Trajectory &traj) = 0
    +double getScale()
    +void setScale(double scale)
    #TrajectoryCostFunction(double scale = 1.0): scale_(scale) {}
    -double scale_
}
note right: 軌跡決定のインターフェース。\n各サンプリング実行中に、コスト関数を使用して多数の軌跡のバッチ(＝一団？)が採点される。\nprepareメソッドは各バッチ実行の前に呼び出され、\n次にサンプリングセットの各軌跡に対して、scoreTrajectoryが呼び出される。

class Osci {
    +double scoreTrajectory(Trajectory &traj)
    +bool prepare() { return true; }
    +void resetOscillationFlags()
    +void updateOscillationFlags(Vector3f pos, Trajectory* traj, double min_vel_trans)
    +void setOscillationResetDist(double dist, double angle)
    -void resetOscillationFlagsIfPossible(const Vector3f pos, const Vector3f& prev)
    -void setOscillationFlags(Trajectory* t, double min_vel_trans)
    -bool strafe_pos_only_, strafe_neg_only_, strafing_pos_, strafing_neg_
    -bool rot_pos_only, rot_neg_only_, rotating_pos_, rotating_neg_
    -bool forward_pos_only_, forward_neg_only, forward_pos_, forward_neg_
    -double oscillation_reset_dist_, oscillation_reset_angle_
    -Vector3f prev_stationary_pos_
}

Traj <|-- Osci

@enduml