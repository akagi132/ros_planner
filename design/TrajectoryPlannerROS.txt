@startuml{TrajectoryPlannerROS.png}

scale 1.5

class TrajectoryPlannerROS {
    +TrajectoryPlannerROS()
    +TrajectoryPlannerROS(string name, Buffer* tf, Costmap2DROS* costmap_ros)
    +void initialize(string name, Buffer* tf, Costmap2DROS* costmap_ros)
    +bool computeVelocityCommands(Twist& cmd_vel)
    +bool setPlan(const vector<PoseStamped>& orig_global_plan)
    +bool isGoalReached()
    +bool checkTrajectory(double vx_samp, double vy_samp, double vtheta_samp, bool update_map = true)
    +double scoreTrajectory(double vx_samp, double vy_samp, double vtheta_samp, bool update_map = true)
    +bool isInitialized()
    +TrajectoryPlanner* getPlanner() const
    -void reconfigureCB(BaseLocalPlannerConfig &config, uint32_t level)
    -bool rotateToGoal(const PoseStamped& global_pose, const PoseStamped& robot_vel, double goal_th, Twist& cmd_vel)
    -bool stopWithAccLimits(const PoseStamped& global_pose, const PoseStamped& robot_vel, Twist& cmd_vel)
    -vector<double> loadYVels(NodeHandle node)
    -double sign(double x)
    -WorldModel* world_model_
    -TrajectoryPlanner* tc_
    -Costmap2DROS* costmap_ros_
    -Costmap2D* costmap_
    -MapGridVisualizer map_viz_
    -Buffer* tf_
    -string global_frame_
    -double max_sensor_range_
    -Odometry base_odom_
    -string robot_base_frame_
    -double rot_stopped_velocity_, trans_stopped_velocity_
    -double xy_goal_tolerance_, yaw_goal_tolerance_, min_in_place_vel_th_
    -vector<PoseStamped> global_plan_
    -bool prune_plan_
    -recursive_mutex odom_lock_
    -double max_vel_th_, min_vel_th_
    -double acc_lim_x_, acc_lim_y_, acc_lim_theta_
    -double sim_period_
    -bool rotating_to_goal_
    -bool reached_goal_
    -bool latch_xy_goal_tolerance_, xy_tolerance_latch_
    -Publisher g_plan_pub_, l_plan_pub_
    -Server<BaseLocalPlannerConfig> *dsrv_
    -BaseLocalPlannerConfig default_config_
    -bool setup_
    -bool initialized_
    -OdometryHelperRos odom_helper_
    -vector<Point> footprint_spec_
}

note top: 

@enduml